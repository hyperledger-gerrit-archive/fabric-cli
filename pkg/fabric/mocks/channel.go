// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-cli/pkg/fabric"
	"github.com/hyperledger/fabric-sdk-go/pkg/client/channel"
	"github.com/hyperledger/fabric-sdk-go/pkg/client/channel/invoke"
	"github.com/hyperledger/fabric-sdk-go/pkg/common/providers/fab"
)

type Channel struct {
	ExecuteStub        func(channel.Request, ...channel.RequestOption) (channel.Response, error)
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		arg1 channel.Request
		arg2 []channel.RequestOption
	}
	executeReturns struct {
		result1 channel.Response
		result2 error
	}
	executeReturnsOnCall map[int]struct {
		result1 channel.Response
		result2 error
	}
	InvokeHandlerStub        func(invoke.Handler, channel.Request, ...channel.RequestOption) (channel.Response, error)
	invokeHandlerMutex       sync.RWMutex
	invokeHandlerArgsForCall []struct {
		arg1 invoke.Handler
		arg2 channel.Request
		arg3 []channel.RequestOption
	}
	invokeHandlerReturns struct {
		result1 channel.Response
		result2 error
	}
	invokeHandlerReturnsOnCall map[int]struct {
		result1 channel.Response
		result2 error
	}
	QueryStub        func(channel.Request, ...channel.RequestOption) (channel.Response, error)
	queryMutex       sync.RWMutex
	queryArgsForCall []struct {
		arg1 channel.Request
		arg2 []channel.RequestOption
	}
	queryReturns struct {
		result1 channel.Response
		result2 error
	}
	queryReturnsOnCall map[int]struct {
		result1 channel.Response
		result2 error
	}
	RegisterChaincodeEventStub        func(string, string) (fab.Registration, <-chan *fab.CCEvent, error)
	registerChaincodeEventMutex       sync.RWMutex
	registerChaincodeEventArgsForCall []struct {
		arg1 string
		arg2 string
	}
	registerChaincodeEventReturns struct {
		result1 fab.Registration
		result2 <-chan *fab.CCEvent
		result3 error
	}
	registerChaincodeEventReturnsOnCall map[int]struct {
		result1 fab.Registration
		result2 <-chan *fab.CCEvent
		result3 error
	}
	UnregisterChaincodeEventStub        func(fab.Registration)
	unregisterChaincodeEventMutex       sync.RWMutex
	unregisterChaincodeEventArgsForCall []struct {
		arg1 fab.Registration
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Channel) Execute(arg1 channel.Request, arg2 ...channel.RequestOption) (channel.Response, error) {
	fake.executeMutex.Lock()
	ret, specificReturn := fake.executeReturnsOnCall[len(fake.executeArgsForCall)]
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		arg1 channel.Request
		arg2 []channel.RequestOption
	}{arg1, arg2})
	fake.recordInvocation("Execute", []interface{}{arg1, arg2})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.executeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Channel) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *Channel) ExecuteCalls(stub func(channel.Request, ...channel.RequestOption) (channel.Response, error)) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = stub
}

func (fake *Channel) ExecuteArgsForCall(i int) (channel.Request, []channel.RequestOption) {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	argsForCall := fake.executeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Channel) ExecuteReturns(result1 channel.Response, result2 error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 channel.Response
		result2 error
	}{result1, result2}
}

func (fake *Channel) ExecuteReturnsOnCall(i int, result1 channel.Response, result2 error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = nil
	if fake.executeReturnsOnCall == nil {
		fake.executeReturnsOnCall = make(map[int]struct {
			result1 channel.Response
			result2 error
		})
	}
	fake.executeReturnsOnCall[i] = struct {
		result1 channel.Response
		result2 error
	}{result1, result2}
}

func (fake *Channel) InvokeHandler(arg1 invoke.Handler, arg2 channel.Request, arg3 ...channel.RequestOption) (channel.Response, error) {
	fake.invokeHandlerMutex.Lock()
	ret, specificReturn := fake.invokeHandlerReturnsOnCall[len(fake.invokeHandlerArgsForCall)]
	fake.invokeHandlerArgsForCall = append(fake.invokeHandlerArgsForCall, struct {
		arg1 invoke.Handler
		arg2 channel.Request
		arg3 []channel.RequestOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("InvokeHandler", []interface{}{arg1, arg2, arg3})
	fake.invokeHandlerMutex.Unlock()
	if fake.InvokeHandlerStub != nil {
		return fake.InvokeHandlerStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.invokeHandlerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Channel) InvokeHandlerCallCount() int {
	fake.invokeHandlerMutex.RLock()
	defer fake.invokeHandlerMutex.RUnlock()
	return len(fake.invokeHandlerArgsForCall)
}

func (fake *Channel) InvokeHandlerCalls(stub func(invoke.Handler, channel.Request, ...channel.RequestOption) (channel.Response, error)) {
	fake.invokeHandlerMutex.Lock()
	defer fake.invokeHandlerMutex.Unlock()
	fake.InvokeHandlerStub = stub
}

func (fake *Channel) InvokeHandlerArgsForCall(i int) (invoke.Handler, channel.Request, []channel.RequestOption) {
	fake.invokeHandlerMutex.RLock()
	defer fake.invokeHandlerMutex.RUnlock()
	argsForCall := fake.invokeHandlerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Channel) InvokeHandlerReturns(result1 channel.Response, result2 error) {
	fake.invokeHandlerMutex.Lock()
	defer fake.invokeHandlerMutex.Unlock()
	fake.InvokeHandlerStub = nil
	fake.invokeHandlerReturns = struct {
		result1 channel.Response
		result2 error
	}{result1, result2}
}

func (fake *Channel) InvokeHandlerReturnsOnCall(i int, result1 channel.Response, result2 error) {
	fake.invokeHandlerMutex.Lock()
	defer fake.invokeHandlerMutex.Unlock()
	fake.InvokeHandlerStub = nil
	if fake.invokeHandlerReturnsOnCall == nil {
		fake.invokeHandlerReturnsOnCall = make(map[int]struct {
			result1 channel.Response
			result2 error
		})
	}
	fake.invokeHandlerReturnsOnCall[i] = struct {
		result1 channel.Response
		result2 error
	}{result1, result2}
}

func (fake *Channel) Query(arg1 channel.Request, arg2 ...channel.RequestOption) (channel.Response, error) {
	fake.queryMutex.Lock()
	ret, specificReturn := fake.queryReturnsOnCall[len(fake.queryArgsForCall)]
	fake.queryArgsForCall = append(fake.queryArgsForCall, struct {
		arg1 channel.Request
		arg2 []channel.RequestOption
	}{arg1, arg2})
	fake.recordInvocation("Query", []interface{}{arg1, arg2})
	fake.queryMutex.Unlock()
	if fake.QueryStub != nil {
		return fake.QueryStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Channel) QueryCallCount() int {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return len(fake.queryArgsForCall)
}

func (fake *Channel) QueryCalls(stub func(channel.Request, ...channel.RequestOption) (channel.Response, error)) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = stub
}

func (fake *Channel) QueryArgsForCall(i int) (channel.Request, []channel.RequestOption) {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	argsForCall := fake.queryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Channel) QueryReturns(result1 channel.Response, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	fake.queryReturns = struct {
		result1 channel.Response
		result2 error
	}{result1, result2}
}

func (fake *Channel) QueryReturnsOnCall(i int, result1 channel.Response, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	if fake.queryReturnsOnCall == nil {
		fake.queryReturnsOnCall = make(map[int]struct {
			result1 channel.Response
			result2 error
		})
	}
	fake.queryReturnsOnCall[i] = struct {
		result1 channel.Response
		result2 error
	}{result1, result2}
}

func (fake *Channel) RegisterChaincodeEvent(arg1 string, arg2 string) (fab.Registration, <-chan *fab.CCEvent, error) {
	fake.registerChaincodeEventMutex.Lock()
	ret, specificReturn := fake.registerChaincodeEventReturnsOnCall[len(fake.registerChaincodeEventArgsForCall)]
	fake.registerChaincodeEventArgsForCall = append(fake.registerChaincodeEventArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RegisterChaincodeEvent", []interface{}{arg1, arg2})
	fake.registerChaincodeEventMutex.Unlock()
	if fake.RegisterChaincodeEventStub != nil {
		return fake.RegisterChaincodeEventStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.registerChaincodeEventReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *Channel) RegisterChaincodeEventCallCount() int {
	fake.registerChaincodeEventMutex.RLock()
	defer fake.registerChaincodeEventMutex.RUnlock()
	return len(fake.registerChaincodeEventArgsForCall)
}

func (fake *Channel) RegisterChaincodeEventCalls(stub func(string, string) (fab.Registration, <-chan *fab.CCEvent, error)) {
	fake.registerChaincodeEventMutex.Lock()
	defer fake.registerChaincodeEventMutex.Unlock()
	fake.RegisterChaincodeEventStub = stub
}

func (fake *Channel) RegisterChaincodeEventArgsForCall(i int) (string, string) {
	fake.registerChaincodeEventMutex.RLock()
	defer fake.registerChaincodeEventMutex.RUnlock()
	argsForCall := fake.registerChaincodeEventArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Channel) RegisterChaincodeEventReturns(result1 fab.Registration, result2 <-chan *fab.CCEvent, result3 error) {
	fake.registerChaincodeEventMutex.Lock()
	defer fake.registerChaincodeEventMutex.Unlock()
	fake.RegisterChaincodeEventStub = nil
	fake.registerChaincodeEventReturns = struct {
		result1 fab.Registration
		result2 <-chan *fab.CCEvent
		result3 error
	}{result1, result2, result3}
}

func (fake *Channel) RegisterChaincodeEventReturnsOnCall(i int, result1 fab.Registration, result2 <-chan *fab.CCEvent, result3 error) {
	fake.registerChaincodeEventMutex.Lock()
	defer fake.registerChaincodeEventMutex.Unlock()
	fake.RegisterChaincodeEventStub = nil
	if fake.registerChaincodeEventReturnsOnCall == nil {
		fake.registerChaincodeEventReturnsOnCall = make(map[int]struct {
			result1 fab.Registration
			result2 <-chan *fab.CCEvent
			result3 error
		})
	}
	fake.registerChaincodeEventReturnsOnCall[i] = struct {
		result1 fab.Registration
		result2 <-chan *fab.CCEvent
		result3 error
	}{result1, result2, result3}
}

func (fake *Channel) UnregisterChaincodeEvent(arg1 fab.Registration) {
	fake.unregisterChaincodeEventMutex.Lock()
	fake.unregisterChaincodeEventArgsForCall = append(fake.unregisterChaincodeEventArgsForCall, struct {
		arg1 fab.Registration
	}{arg1})
	fake.recordInvocation("UnregisterChaincodeEvent", []interface{}{arg1})
	fake.unregisterChaincodeEventMutex.Unlock()
	if fake.UnregisterChaincodeEventStub != nil {
		fake.UnregisterChaincodeEventStub(arg1)
	}
}

func (fake *Channel) UnregisterChaincodeEventCallCount() int {
	fake.unregisterChaincodeEventMutex.RLock()
	defer fake.unregisterChaincodeEventMutex.RUnlock()
	return len(fake.unregisterChaincodeEventArgsForCall)
}

func (fake *Channel) UnregisterChaincodeEventCalls(stub func(fab.Registration)) {
	fake.unregisterChaincodeEventMutex.Lock()
	defer fake.unregisterChaincodeEventMutex.Unlock()
	fake.UnregisterChaincodeEventStub = stub
}

func (fake *Channel) UnregisterChaincodeEventArgsForCall(i int) fab.Registration {
	fake.unregisterChaincodeEventMutex.RLock()
	defer fake.unregisterChaincodeEventMutex.RUnlock()
	argsForCall := fake.unregisterChaincodeEventArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Channel) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	fake.invokeHandlerMutex.RLock()
	defer fake.invokeHandlerMutex.RUnlock()
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	fake.registerChaincodeEventMutex.RLock()
	defer fake.registerChaincodeEventMutex.RUnlock()
	fake.unregisterChaincodeEventMutex.RLock()
	defer fake.unregisterChaincodeEventMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Channel) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fabric.Channel = new(Channel)
