// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-cli/pkg/environment"
	"github.com/hyperledger/fabric-cli/pkg/plugin"
	"github.com/spf13/cobra"
)

type PluginHandler struct {
	GetPluginsStub        func() ([]*plugin.Plugin, error)
	getPluginsMutex       sync.RWMutex
	getPluginsArgsForCall []struct {
	}
	getPluginsReturns struct {
		result1 []*plugin.Plugin
		result2 error
	}
	getPluginsReturnsOnCall map[int]struct {
		result1 []*plugin.Plugin
		result2 error
	}
	InstallPluginStub        func(string) error
	installPluginMutex       sync.RWMutex
	installPluginArgsForCall []struct {
		arg1 string
	}
	installPluginReturns struct {
		result1 error
	}
	installPluginReturnsOnCall map[int]struct {
		result1 error
	}
	LoadGoPluginStub        func(string, *environment.Settings) (*cobra.Command, error)
	loadGoPluginMutex       sync.RWMutex
	loadGoPluginArgsForCall []struct {
		arg1 string
		arg2 *environment.Settings
	}
	loadGoPluginReturns struct {
		result1 *cobra.Command
		result2 error
	}
	loadGoPluginReturnsOnCall map[int]struct {
		result1 *cobra.Command
		result2 error
	}
	UninstallPluginStub        func(string) error
	uninstallPluginMutex       sync.RWMutex
	uninstallPluginArgsForCall []struct {
		arg1 string
	}
	uninstallPluginReturns struct {
		result1 error
	}
	uninstallPluginReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PluginHandler) GetPlugins() ([]*plugin.Plugin, error) {
	fake.getPluginsMutex.Lock()
	ret, specificReturn := fake.getPluginsReturnsOnCall[len(fake.getPluginsArgsForCall)]
	fake.getPluginsArgsForCall = append(fake.getPluginsArgsForCall, struct {
	}{})
	fake.recordInvocation("GetPlugins", []interface{}{})
	fake.getPluginsMutex.Unlock()
	if fake.GetPluginsStub != nil {
		return fake.GetPluginsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPluginsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *PluginHandler) GetPluginsCallCount() int {
	fake.getPluginsMutex.RLock()
	defer fake.getPluginsMutex.RUnlock()
	return len(fake.getPluginsArgsForCall)
}

func (fake *PluginHandler) GetPluginsCalls(stub func() ([]*plugin.Plugin, error)) {
	fake.getPluginsMutex.Lock()
	defer fake.getPluginsMutex.Unlock()
	fake.GetPluginsStub = stub
}

func (fake *PluginHandler) GetPluginsReturns(result1 []*plugin.Plugin, result2 error) {
	fake.getPluginsMutex.Lock()
	defer fake.getPluginsMutex.Unlock()
	fake.GetPluginsStub = nil
	fake.getPluginsReturns = struct {
		result1 []*plugin.Plugin
		result2 error
	}{result1, result2}
}

func (fake *PluginHandler) GetPluginsReturnsOnCall(i int, result1 []*plugin.Plugin, result2 error) {
	fake.getPluginsMutex.Lock()
	defer fake.getPluginsMutex.Unlock()
	fake.GetPluginsStub = nil
	if fake.getPluginsReturnsOnCall == nil {
		fake.getPluginsReturnsOnCall = make(map[int]struct {
			result1 []*plugin.Plugin
			result2 error
		})
	}
	fake.getPluginsReturnsOnCall[i] = struct {
		result1 []*plugin.Plugin
		result2 error
	}{result1, result2}
}

func (fake *PluginHandler) InstallPlugin(arg1 string) error {
	fake.installPluginMutex.Lock()
	ret, specificReturn := fake.installPluginReturnsOnCall[len(fake.installPluginArgsForCall)]
	fake.installPluginArgsForCall = append(fake.installPluginArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("InstallPlugin", []interface{}{arg1})
	fake.installPluginMutex.Unlock()
	if fake.InstallPluginStub != nil {
		return fake.InstallPluginStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.installPluginReturns
	return fakeReturns.result1
}

func (fake *PluginHandler) InstallPluginCallCount() int {
	fake.installPluginMutex.RLock()
	defer fake.installPluginMutex.RUnlock()
	return len(fake.installPluginArgsForCall)
}

func (fake *PluginHandler) InstallPluginCalls(stub func(string) error) {
	fake.installPluginMutex.Lock()
	defer fake.installPluginMutex.Unlock()
	fake.InstallPluginStub = stub
}

func (fake *PluginHandler) InstallPluginArgsForCall(i int) string {
	fake.installPluginMutex.RLock()
	defer fake.installPluginMutex.RUnlock()
	argsForCall := fake.installPluginArgsForCall[i]
	return argsForCall.arg1
}

func (fake *PluginHandler) InstallPluginReturns(result1 error) {
	fake.installPluginMutex.Lock()
	defer fake.installPluginMutex.Unlock()
	fake.InstallPluginStub = nil
	fake.installPluginReturns = struct {
		result1 error
	}{result1}
}

func (fake *PluginHandler) InstallPluginReturnsOnCall(i int, result1 error) {
	fake.installPluginMutex.Lock()
	defer fake.installPluginMutex.Unlock()
	fake.InstallPluginStub = nil
	if fake.installPluginReturnsOnCall == nil {
		fake.installPluginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.installPluginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *PluginHandler) LoadGoPlugin(arg1 string, arg2 *environment.Settings) (*cobra.Command, error) {
	fake.loadGoPluginMutex.Lock()
	ret, specificReturn := fake.loadGoPluginReturnsOnCall[len(fake.loadGoPluginArgsForCall)]
	fake.loadGoPluginArgsForCall = append(fake.loadGoPluginArgsForCall, struct {
		arg1 string
		arg2 *environment.Settings
	}{arg1, arg2})
	fake.recordInvocation("LoadGoPlugin", []interface{}{arg1, arg2})
	fake.loadGoPluginMutex.Unlock()
	if fake.LoadGoPluginStub != nil {
		return fake.LoadGoPluginStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.loadGoPluginReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *PluginHandler) LoadGoPluginCallCount() int {
	fake.loadGoPluginMutex.RLock()
	defer fake.loadGoPluginMutex.RUnlock()
	return len(fake.loadGoPluginArgsForCall)
}

func (fake *PluginHandler) LoadGoPluginCalls(stub func(string, *environment.Settings) (*cobra.Command, error)) {
	fake.loadGoPluginMutex.Lock()
	defer fake.loadGoPluginMutex.Unlock()
	fake.LoadGoPluginStub = stub
}

func (fake *PluginHandler) LoadGoPluginArgsForCall(i int) (string, *environment.Settings) {
	fake.loadGoPluginMutex.RLock()
	defer fake.loadGoPluginMutex.RUnlock()
	argsForCall := fake.loadGoPluginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *PluginHandler) LoadGoPluginReturns(result1 *cobra.Command, result2 error) {
	fake.loadGoPluginMutex.Lock()
	defer fake.loadGoPluginMutex.Unlock()
	fake.LoadGoPluginStub = nil
	fake.loadGoPluginReturns = struct {
		result1 *cobra.Command
		result2 error
	}{result1, result2}
}

func (fake *PluginHandler) LoadGoPluginReturnsOnCall(i int, result1 *cobra.Command, result2 error) {
	fake.loadGoPluginMutex.Lock()
	defer fake.loadGoPluginMutex.Unlock()
	fake.LoadGoPluginStub = nil
	if fake.loadGoPluginReturnsOnCall == nil {
		fake.loadGoPluginReturnsOnCall = make(map[int]struct {
			result1 *cobra.Command
			result2 error
		})
	}
	fake.loadGoPluginReturnsOnCall[i] = struct {
		result1 *cobra.Command
		result2 error
	}{result1, result2}
}

func (fake *PluginHandler) UninstallPlugin(arg1 string) error {
	fake.uninstallPluginMutex.Lock()
	ret, specificReturn := fake.uninstallPluginReturnsOnCall[len(fake.uninstallPluginArgsForCall)]
	fake.uninstallPluginArgsForCall = append(fake.uninstallPluginArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("UninstallPlugin", []interface{}{arg1})
	fake.uninstallPluginMutex.Unlock()
	if fake.UninstallPluginStub != nil {
		return fake.UninstallPluginStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.uninstallPluginReturns
	return fakeReturns.result1
}

func (fake *PluginHandler) UninstallPluginCallCount() int {
	fake.uninstallPluginMutex.RLock()
	defer fake.uninstallPluginMutex.RUnlock()
	return len(fake.uninstallPluginArgsForCall)
}

func (fake *PluginHandler) UninstallPluginCalls(stub func(string) error) {
	fake.uninstallPluginMutex.Lock()
	defer fake.uninstallPluginMutex.Unlock()
	fake.UninstallPluginStub = stub
}

func (fake *PluginHandler) UninstallPluginArgsForCall(i int) string {
	fake.uninstallPluginMutex.RLock()
	defer fake.uninstallPluginMutex.RUnlock()
	argsForCall := fake.uninstallPluginArgsForCall[i]
	return argsForCall.arg1
}

func (fake *PluginHandler) UninstallPluginReturns(result1 error) {
	fake.uninstallPluginMutex.Lock()
	defer fake.uninstallPluginMutex.Unlock()
	fake.UninstallPluginStub = nil
	fake.uninstallPluginReturns = struct {
		result1 error
	}{result1}
}

func (fake *PluginHandler) UninstallPluginReturnsOnCall(i int, result1 error) {
	fake.uninstallPluginMutex.Lock()
	defer fake.uninstallPluginMutex.Unlock()
	fake.UninstallPluginStub = nil
	if fake.uninstallPluginReturnsOnCall == nil {
		fake.uninstallPluginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uninstallPluginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *PluginHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPluginsMutex.RLock()
	defer fake.getPluginsMutex.RUnlock()
	fake.installPluginMutex.RLock()
	defer fake.installPluginMutex.RUnlock()
	fake.loadGoPluginMutex.RLock()
	defer fake.loadGoPluginMutex.RUnlock()
	fake.uninstallPluginMutex.RLock()
	defer fake.uninstallPluginMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PluginHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugin.Handler = new(PluginHandler)
