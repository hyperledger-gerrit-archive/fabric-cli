// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-cli/pkg/environment"
)

type DefaultConfig struct {
	FromFileStub        func() (*environment.Settings, error)
	fromFileMutex       sync.RWMutex
	fromFileArgsForCall []struct {
	}
	fromFileReturns struct {
		result1 *environment.Settings
		result2 error
	}
	fromFileReturnsOnCall map[int]struct {
		result1 *environment.Settings
		result2 error
	}
	SaveStub        func() error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
	}
	saveReturns struct {
		result1 error
	}
	saveReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DefaultConfig) FromFile() (*environment.Settings, error) {
	fake.fromFileMutex.Lock()
	ret, specificReturn := fake.fromFileReturnsOnCall[len(fake.fromFileArgsForCall)]
	fake.fromFileArgsForCall = append(fake.fromFileArgsForCall, struct {
	}{})
	fake.recordInvocation("FromFile", []interface{}{})
	fake.fromFileMutex.Unlock()
	if fake.FromFileStub != nil {
		return fake.FromFileStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fromFileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *DefaultConfig) FromFileCallCount() int {
	fake.fromFileMutex.RLock()
	defer fake.fromFileMutex.RUnlock()
	return len(fake.fromFileArgsForCall)
}

func (fake *DefaultConfig) FromFileCalls(stub func() (*environment.Settings, error)) {
	fake.fromFileMutex.Lock()
	defer fake.fromFileMutex.Unlock()
	fake.FromFileStub = stub
}

func (fake *DefaultConfig) FromFileReturns(result1 *environment.Settings, result2 error) {
	fake.fromFileMutex.Lock()
	defer fake.fromFileMutex.Unlock()
	fake.FromFileStub = nil
	fake.fromFileReturns = struct {
		result1 *environment.Settings
		result2 error
	}{result1, result2}
}

func (fake *DefaultConfig) FromFileReturnsOnCall(i int, result1 *environment.Settings, result2 error) {
	fake.fromFileMutex.Lock()
	defer fake.fromFileMutex.Unlock()
	fake.FromFileStub = nil
	if fake.fromFileReturnsOnCall == nil {
		fake.fromFileReturnsOnCall = make(map[int]struct {
			result1 *environment.Settings
			result2 error
		})
	}
	fake.fromFileReturnsOnCall[i] = struct {
		result1 *environment.Settings
		result2 error
	}{result1, result2}
}

func (fake *DefaultConfig) Save() error {
	fake.saveMutex.Lock()
	ret, specificReturn := fake.saveReturnsOnCall[len(fake.saveArgsForCall)]
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
	}{})
	fake.recordInvocation("Save", []interface{}{})
	fake.saveMutex.Unlock()
	if fake.SaveStub != nil {
		return fake.SaveStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.saveReturns
	return fakeReturns.result1
}

func (fake *DefaultConfig) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *DefaultConfig) SaveCalls(stub func() error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = stub
}

func (fake *DefaultConfig) SaveReturns(result1 error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

func (fake *DefaultConfig) SaveReturnsOnCall(i int, result1 error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	if fake.saveReturnsOnCall == nil {
		fake.saveReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *DefaultConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fromFileMutex.RLock()
	defer fake.fromFileMutex.RUnlock()
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DefaultConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ environment.Config = new(DefaultConfig)
